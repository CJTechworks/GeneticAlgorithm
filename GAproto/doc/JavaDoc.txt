Java doc for the Singleton, Strategy and Factory Design Patterns using genetic algorithm

com.core.GA.GeneticAlgorithm
	core interface for the genetic algorithm.  this is the interface we need to implement different strategies. 

com.core.GA.GeneticAlgorithm.GeneticAbstractFactory:
	abstact factory class to return the the genetic algorithm based on the client stategy.

com.core.GA.GeneticAlgorithm.GeneticConcreteFactory:
	this class is the concrete factory class which returns the specific strategy requested 
	by the client.

com.core.GA.GeneticAlgorithm.MutationStrategy:
	This class is the strategy class implementation for mutation strategy.this class implements the genetic algorithm interface.
this class is also singleton class and there will only one instance created for java virtual machine.

com.core.GA.GeneticAlgorithm.ReproductionStrategy:
	this is the implementation class for reproduction stategy. this class implements the genetic algorithm interface.this class is also singleton class and there will only one instance created for java virtual machine.

com.core.GA.GeneticAlgorithm.SelectionStrategy:
	this is the implementation class for selection stategy. this class implements the genetic algorithm interface.this class is also singleton class and there will only one instance created for java virtual machine.

com.core.GA.GeneticAlgorithm.EvaluvationStrategy:
	this is the implementation class for evaluvation stategy. this class implements the genetic algorithm interface.this class is also singleton class and there will only one instance created for java virtual machine.

com.core.GA.GeneticAlgorithm.CrossOverStrategy:
	this is the implementation class for crossover stategy. this class implements the genetic algorithm interface.this class is also singleton class and there will only one instance created for java virtual machine.

com.core.utility.Population:
     this Manages all individuals of a population.

com.core.utility.Individual:
     this Manages an individual.

com.core.utility.FitnessCalc:
     this Allows us set a candidate solution and calculate an individual's fitness.
	
com.core.GA.test.TestGeneticAlgorithn:
	this is the client code for dynamic input. The input is the number of generations required. this client code has random logic to decide which strategy to execute out of 3 available strategies, Selection, Reproduction and mutation. 


Sample output for solution size of 64:
Generation: 1 Fittest: 45
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 2 Fittest: 45
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 3 Fittest: 47
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 4 Fittest: 50
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 5 Fittest: 53
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 6 Fittest: 54
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 7 Fittest: 57
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 8 Fittest: 57
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 9 Fittest: 60
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 10 Fittest: 60
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 11 Fittest: 61
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 12 Fittest: 61
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 13 Fittest: 63
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Generation: 14 Fittest: 63
EVALUVATION...
SELECTION ...
CROSSOVER...
MUTATION...
Solution found!
Generation: 14
Genes:
1111000000000000000000000000000000000000000000000000000000001111







